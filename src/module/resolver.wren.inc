// Please do not edit this file. It has been generated automatically
// from `src/module/resolver.wren` using `util/wren_to_c_string.py`

static const char* resolverModuleSource =
"var WREN_MODULES = null\n"
"\n"
"class Module {\n"
"    construct new(cwd, module, home) {\n"
"        _cwd = cwd\n"
"        // var pieces = module.split(\"~~\")\n"
"        // _importer = pieces[0]\n"
"        // _module = pieces[1]\n"
"        _module = module\n"
"        _home = home\n"
"    }\n"
"    // static log(x) { System.print(x) }\n"
"    // log(x) { System.print(x) }\n"
"    log(x) {}\n"
"    static log(x) {}\n"
"    static resolve(cwd, module, home) {\n"
"        log(\"WREN Resolve: %(module) in %(cwd)\")\n"
"\n"
"        var res = Module.new(cwd, module, home)\n"
"        return res.relativeResolver || \n"
"            res.wrenModulesResolver ||\n"
"            res.wrenHomeResolver \n"
"    }\n"
"    findWrenModules() {\n"
"        if (WREN_MODULES != null) return WREN_MODULES\n"
"\n"
"        log(\"SEARCHING for wren_modules\")\n"
"        var pieces = _cwd.split(\"/\")\n"
"        for (i in (pieces.count-1)..1) {\n"
"            var path = pieces[0..i].join(\"/\") + \"/wren_module\"\n"
"            log(path)\n"
"            if (File.existsSync(path)) {\n"
"                WREN_MODULES = path\n"
"                return path\n"
"            }\n"
"        }\n"
"    }\n"
"    wrenModulesResolver {\n"
"        log(\"wren_modules resolver\")\n"
"        var modules = findWrenModules()\n"
"        if (modules == null) return null \n"
"\n"
"        var locations = [\n"
"            Path.join([modules,_module + \".wren\"]),\n"
"            Path.join([modules,_module,_module + \".wren\"])\n"
"        ]\n"
"        for (x in locations) {\n"
"            log(x)\n"
"            if (File.existsSync(x)) return x\n"
"        }     \n"
"\n"
"    }\n"
"    relativeResolver {\n"
"        if (!_module.startsWith(\"./\")) return null\n"
"\n"
"        var locations = [\n"
"            Path.join([\"%(_module).wren\"]),\n"
"            Path.join([\"%(_module)/%(_module).wren\"])\n"
"        ]\n"
"        for (x in locations) {\n"
"            log(x)\n"
"            if (File.existsSync(x)) return x\n"
"        }        \n"
"    }\n"
"    wrenHomeResolver {\n"
"        var locations = [\n"
"            Path.join([_home,\".wren/lib\",_module + \".wren\"]),\n"
"            Path.join([_home,\".wren\",_module + \".wren\"])\n"
"        ]\n"
"        for (x in locations) {\n"
"            log(x)\n"
"            if (File.existsSync(x)) return x\n"
"        }        \n"
"    }\n"
"}\n"
"\n"
"class Path {\n"
"    static join(list) { list.join(\"/\").replace(\"//\",\"/\") }\n"
"}\n"
"\n"
"class File {\n"
"    foreign static existsSync(s)\n"
"}\n"
"\n"
"\n"
"\n";
